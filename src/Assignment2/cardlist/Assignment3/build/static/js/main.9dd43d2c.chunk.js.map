{"version":3,"sources":["CardList.js","AboutPage.js","SpecificCard.js","App.js","reportWebVitals.js","index.js"],"names":["data","setCard","a","fetch","method","headers","body","JSON","stringify","then","res","text","parse","name","CardPage","props","useState","nameValidation","setNameValidation","urlValidation","setUrlValidation","setName","url","setUrl","description","setDescription","cards","useEffect","id","className","type","value","onChange","event","target","onClick","e","failed","repeated","find","x","customValidation","preventDefault","addCard","border","map","card","index","renderCardDescription","alt","src","deleteCard","AboutPage","SpecificCard","cardName","App","page","setPage","CardList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dd43d2c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport './App.css';\n\nasync function addCard(data, setCard) {\n    fetch('http://localhost:3001/cards', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n    }).then(res => res.text()).then(res => setCard(JSON.parse(res)));\n}\n\nasync function deleteCard(setCard, name) {\n    fetch(`http://localhost:3001/cards/${name}`, {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }).then(res => res.text()).then(res => setCard(JSON.parse(res)));\n}\n\nfunction CardPage(props) {\n    const [nameValidation, setNameValidation] = useState('');\n    const [urlValidation, setUrlValidation] = useState('');\n    const [name, setName] = useState('');\n    const [url, setUrl] = useState('');\n    const [description, setDescription] = useState('');\n    const [cards, setCard] = useState([]);\n\n    useEffect(() => {\n        fetch(\"http://localhost:3001/cards\").then(res => res.text()).then(res => setCard(JSON.parse(res)));\n    }, []);\n\n    const customValidation = () => {\n        let failed = false;\n        const repeated = cards.find(x => x.name === name)\n        if (name === '') {\n            setNameValidation(\"empty\");\n            failed = true;\n        } else if (repeated) {\n            setNameValidation(\"repeated\");\n            failed = true;\n        }\n        if (url === '') {\n            setUrlValidation(\"empty\");\n            failed = true;\n        }\n        return failed;\n    }\n    return (\n        <div id=\"card-page\" className=\"paper\">\n            <form className=\"form\" >\n                <label id=\"name\">Name</label><br />\n                <input type=\"text\" id=\"name\" value={name} onChange={(event) => { setName(event.target.value); setNameValidation('') }} /><br />\n                {nameValidation && <div className=\"validation\">{nameValidation === \"empty\" ? \"Name cannot be empty\" : \"Name is already in use\"}</div>}\n                <label id=\"image\">Image Link</label><br />\n                <input type=\"text\" id=\"image\" value={url} onChange={(event) => { setUrl(event.target.value); setUrlValidation('') }} /><br />\n                {urlValidation && <div className=\"validation\"> Url cannot be empty </div>}\n                <label id=\"description\">Description</label><br />\n                <input type=\"text\" id=\"description\" value={description} onChange={(event) => setDescription(event.target.value)} /> <br /><br />\n                <input type=\"reset\" className=\"button\" value=\"Clear\" onClick={() => { setName(''); setUrl(''); setDescription(''); setUrlValidation(''); setNameValidation('') }} />\n                <button type=\"button\" className=\"button\" onClick={(e) => customValidation() ? e.preventDefault() : addCard({ name: name, url: url, description: description }, setCard)}>Submit</button>\n            </form>\n            <table id=\"card-list\" border=\"3\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th className=\"image\">Image</th>\n                        <th>Delete </th>\n                    </tr>\n                </thead>\n                <tbody id=\"card-body\">\n                    {cards.map((card, index) => (\n                        <tr key={index}>\n                            <td onClick={() => props.renderCardDescription(card.name)}>{card.name}</td>\n                            <td><img alt=\"URL Invalid\" src={card.url} onClick={() => props.renderCardDescription(card.name)} /></td>\n                            <td><button type=\"button\" onClick={() => deleteCard(setCard, card.name)}> Delete </button></td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default CardPage;","import './App.css';\n\nfunction AboutPage() {\n    return (\n        <div id=\"main-page\" className='main'>\n            Hey guys, my name is Truman and this is my very first project for CPSC455. Here, I am going to do a very\n            simple card storage web app with a little twist in it!\n            Hope you guys enjoy my little invention.\n        </div>\n    )\n}\nexport default AboutPage;","import { useEffect, useState } from 'react';\nimport './App.css';\n\n\n\nfunction SpecificCard(props) {\n    const [card, setCard] = useState('');\n\n    useEffect(() => {\n        fetch(`http://localhost:3001/cards/${props.cardName}`).then(res => res.text()).then(res => setCard(JSON.parse(res)));\n    }, [props.cardName]);\n\n    return (\n        <div id=\"main-page\" className='specificcard'>\n            <img alt=\"URL Invalid\" src={card.url} />\n            <div className='description'>{card.description}\n            </div>\n        </div>\n    )\n}\nexport default SpecificCard;","import { useState } from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport AboutPage from './AboutPage';\nimport SpecificCard from './SpecificCard';\n\nfunction App() {\n  const [page, setPage] = useState('2');\n  const [card, renderCardDescription] = useState('');\n  const renderCard = () => {\n    if (card) {\n      return <SpecificCard cardName={card} />\n    }\n    return <CardList renderCardDescription={renderCardDescription} />\n  }\n  return (\n    <div className=\"page\">\n      <div className=\"paper\">\n        <span className=\"navItem\" onClick={() => { setPage('1'); renderCardDescription('') }}>Main</span>\n        <span className=\"navItem\" onClick={() => { setPage('2'); renderCardDescription('') }} >Cards</span>\n      </div>\n      {page === '2' && renderCard()}\n      {page === '1' && <AboutPage />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}